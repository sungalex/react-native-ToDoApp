{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","header","TouchableOpacity","onPress","Text","color","fontSize","fontWeight","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","event","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","todo","todoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StatusBar","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","marginTop","justifyContent","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.002d152a.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n};\n","import { useEffect, useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const work = () => setWorking(true);\n  const travel = () => setWorking(false);\n  const onChangeText = (event) => setText(event);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  // console.log(toDos);\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              color: \"white\",\n              fontSize: 38,\n              fontWeight: \"500\",\n              color: working ? \"white\" : theme.grey,\n            }}>\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              color: \"white\",\n              fontSize: 38,\n              fontWeight: \"500\",\n              color: !working ? \"white\" : theme.grey,\n            }}>\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go\"}\n        style={styles.input}></TextInput>\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View key={key} style={styles.todo}>\n              <Text style={styles.todoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={16} color=\"black\" color=\"white\" />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    flexDirection: \"row\",\n    marginTop: 100,\n    justifyContent: \"space-between\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  todo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  todoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}